version: 2.1

orbs:
  prodsec: snyk/prodsec-orb@1
  go: circleci/go@1.9.0
  node: circleci/node@5.2.0
  publish: snyk/publish@1

defaults: &defaults
  resource_class: small
  working_directory: ~/vervet
  docker:
    - image: cimg/go:1.22.5-node

test_defaults: &test_defaults
  resource_class: medium
  working_directory: ~/vervet
  machine:
    image: ubuntu-2004:2023.10.1

ignore_main_branch_filter: &ignore_main_branch_filter
  filters:
    branches:
      ignore:
        - main
        - v7

only_main_branch_filter: &only_main_branch_filter
  filters:
    branches:
      only:
        - main
        - v7

only_tags_filter: &only_tags_filter
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

commands:
  gcr_auth:
    description: Auth GCR
    steps:
      - setup_remote_docker
      - run:
          name: GCR auth
          command: echo $GCLOUD_GCR_BUILDER | docker login -u _json_key --password-stdin https://gcr.io/snyk-main

  setup_build_remote_docker:
    steps:
      - setup_remote_docker:
          docker_layer_caching: false

jobs:
  test:
    <<: *test_defaults
    steps:
      - checkout
      - go/install:
          version: 1.22.5
      - go/mod-download-cached
      - run:
          name: Verify testdata/output up to date
          command: go generate ./testdata
      - run:
          name: Run tests
          command: go test ./... -count=1

  lint:
    docker:
      - image: golangci/golangci-lint:v1.59.1
    steps:
      - checkout
      - run:
          command: golangci-lint run -v ./...

  security-scans:
    <<: *defaults
    steps:
      - checkout
      - prodsec/security_scans:
          mode: auto
          token-variable: SNYK_TOKEN
          org: platformeng_api

  build-vu:
    <<: *defaults
    steps:
      - checkout:
          path: ~/vervet
      - gcr_auth
      - run:
          name: Build Docker Image
          command: make build-docker APP=vervet-underground
      - publish/save-image:
          image_name: vervet-underground

  prepare-release:
    <<: *defaults
    steps:
      - checkout
      - run: |-
          go install github.com/caarlos0/svu@latest
          export VERSION=$(svu next)
          if [ -z $(git tag -l ${VERSION}) ]; then
            ./scripts/genversion.bash
            # Sync dependencies to the nix package, will be a no-op if
            # dependencies haven't changed
            go run github.com/nix-community/gomod2nix@latest
            if [ -z $(git config user.email) ]; then
                git config credential.helper 'cache --timeout=120'
                git config user.email "vervet-ci@noreply.snyk.io"
                git config user.name "Vervet CI"
            fi
            git add internal/cmd/cmd.go gomod2nix.toml
            git commit -m "chore: prepare release ${VERSION}"
            git tag ${VERSION}
            git push -q https://${GH_TOKEN}@github.com/snyk/vervet.git main --tags
          fi

  release:
    <<: *defaults
    steps:
      - checkout
      - run: |-
          export VERSION=$CIRCLE_TAG
          ./scripts/dist.bash
          ./scripts/release.bash

  rebuild-tools:
    <<: *defaults
    steps:
      - run: |-
          curl -X POST https://circleci.com/api/v2/project/github/snyk/api-tooling/pipeline \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --header "content-type: application/json" \
              --data '{"branch":"main"}'

workflows:
  version: 2
  branch:
    jobs:
      - test:
          name: Test
          <<: *ignore_main_branch_filter

      - lint:
          name: Lint
          <<: *ignore_main_branch_filter

      - prodsec/secrets-scan:
          name: Scan repository for secrets
          context:
            - snyk-bot-slack
          channel: alerts-api
          trusted-branch: main
          <<: *ignore_main_branch_filter

      - security-scans:
          name: Security Scans
          context:
            - platformeng_api
          <<: *ignore_main_branch_filter

      - build-vu:
          name: Build Docker Image
          context: snyk-docker-build
          requires:
            - Test
            - Lint

      - prodsec/container-scan:
          name: Scan VU Container
          docker_image_name: vervet-underground:${CIRCLE_WORKFLOW_ID}
          docker_image_filename: images/vervet-underground:${CIRCLE_WORKFLOW_ID}.tar.gz
          snyk_token_variable: SNYK_TOKEN
          snyk_organization: platformeng_api
          context:
            - platformeng_api
          requires:
            - Build Docker Image

  main:
    jobs:
      - test:
          name: Test
          <<: *only_main_branch_filter

      - security-scans:
          name: Security Scans
          context:
            - platformeng_api
          <<: *only_main_branch_filter

      - build-vu:
          name: Build Docker Image
          context: snyk-docker-build
          <<: *only_main_branch_filter

      - prepare-release:
          name: Prepare Release
          context: nodejs-app-release
          requires:
            - Test
            - Security Scans
            - Build Docker Image
          <<: *only_main_branch_filter

  release:
    jobs:
      - release:
          name: Release
          context: nodejs-app-release
          <<: *only_tags_filter

      - build-vu:
          name: Build Docker Image
          context: snyk-docker-build
          <<: *only_tags_filter

      - publish/publish:
          name: Publish Docker Image
          image_name: vervet-underground
          fedramp: "no"
          snyk_organization: platformeng_api
          snyk_token_variable: SNYK_TOKEN
          snyk_project_tags: component=pkg:github/snyk/vervet-underground@main,component=pkg:github/snyk/vervet@main
          context:
            - snyk-docker-build
            - infra-publish-orb
            - platformeng_api
            - snyk-bot-slack
          requires:
            - Build Docker Image
          <<: *only_tags_filter

      - rebuild-tools:
          name: Rebuild api-tooling
          context:
            - manage-api-tooling
          requires:
            - Release
            - Publish Docker Image
          <<: *only_tags_filter
